@startuml
class Cash {
+ void doTransaction(int)
}

class PayByBankCard {
+ void doTransaction(int)
}

class Kid {
~ int kidId
- {static} int counter
~ String name
~ int age
+ String toString()
}

class PayByPhone {
+ void doTransaction(int)
}

interface takingOrder {
~ void takeOrder(int)
}

class KidsRepresentative {
~ int kidsRepresentativeId
- {static} int counter
~ Status representativeStatus
~ String name
~ List<Kid> kids
+ Order makeOrder()
+ void leaveFeedback()
+ String toString()
}

enum Status {
+  PARENT
+  GRANDPARENT
+  ADOPTIVEPARENT
+  OTHERSTATUS
}

abstract class Executor {
~ int executorId
- {static} int counter
~ String name
~ int pricePerHour
~ int age
+ String getName()
+ int getPricePerHour()
+ int getAge()
}

class Main {
+ {static} void main(String[])
}

class Babysitter {
~ int ageOfKidMinimal
~ int ageOfKidMaximal
+ void takeOrder(int)
+ void leaveFeedback()
+ String toString()
}

class Teacher {
~ String subject
+ String toString()
+ void takeOrder(int)
+ void leaveFeedback()
}

interface Payments {
~ void doTransaction(int)
}

class Order {
~ int orderId
- {static} int counter
~ KidsRepresentative client
~ Date date
~ Payments payments
+ void doPayment(int)
+ String toString()
+ void setClient(KidsRepresentative)
}

interface LeavingFeedback {
~ void leaveFeedback()
}

'Способы оплаты имплементируют интерфейс оплат
Payments <|.. Cash
Payments <|.. PayByBankCard
Payments <|.. PayByPhone

'Имплементация интерфесов классами KidsRepresentative и Executor
LeavingFeedback <|.. KidsRepresentative
takingOrder <|.. Executor
LeavingFeedback <|.. Executor

'Babysitter и Teacher наследуются от Executor
Executor <|-- Babysitter
Executor <|-- Teacher

'Композиция - Ребенок в этом контексте не может существовать без взрослого,
'родитель имеет минимум одного ребенка
KidsRepresentative "1" *-- "1..7" Kid : owns >

'Композиция: заказ не может существовать без заказчика.
'У одного заказчика может быть много заказов.
Order "1..n" *-- "1" KidsRepresentative : is created
@enduml