S: каждый класс имеет только одну причину для изменения -> классы компактны и не перегружены
O: классы должны быть доступны для расширения, но не доступны для модификации -> если позже появится еще какой-то вид исполнителя,
то переписывать имеющийся код не придется, можно будет просто унаследоваться от Executor и имплементировать нужные интерфейсы,
например, LeavingFeedback
L: принцип подстановки Барбары Лисков: класс более низкого уровня может корректно отработать на более высоком уровне ->
Teacher и Babysitter унаследованы от Executor и могут его заменить без изменения свойств программы.
I: каждый интерфейс отвечает за одну задачу
D: зависимость в классе Order направлена на абстракцию Payments, а не на кокретные реализации разных видов оплат.
Конкретные реализации содержатся в классах, имплементирующих интерфейс Payments,
таким образом способы оплаты можно легко менять и добалять новые.